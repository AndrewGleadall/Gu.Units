<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.CSharp" #>
<#@ import namespace="System" #>
<#@ output extension=".txt" #>
<#@ assembly name="$(TargetPath)" #>
<#@ import namespace="GeneratorBox.Generator" #> 
<#@ parameter name="ClassMetaData" type="GeneratorBox.Generator.UnitValueMetaData" #>
<# 
if (ClassMetaData != null)
{
	// Template used by Generator.tt
	var classData = ClassMetaData; // Can't remove this without breaking it, dunno why.
#>
namespace <#= classData.Namespace #>
{
    using System;
    using System.Globalization;
    using System.Xml;
    using System.Xml.Linq;
    using System.Xml.Schema;
    using System.Xml.Serialization;

	/// <summary>
    /// An <#= classData.ClassName #>
    /// </summary>
    [Serializable]
	public partial struct <#= classData.ClassName #> : IComparable<<#= classData.ClassName #>>, IEquatable<<#= classData.ClassName #>>, IFormattable, IXmlSerializable, IUnitValue
	{
	    /// <summary>
        /// The value in <see cref="T:<#= classData.Namespace #>.<#= classData.BaseType.Name #>"/>.
        /// </summary>
		public readonly double <#= classData.BaseType.Name #>;
		
		private <#= classData.ClassName #>(double <#= classData.BaseType.ParameterName #>)
        {
            <#= classData.BaseType.Name #> = <#= classData.BaseType.ParameterName #>;
        }

		/// <summary>
        /// Initializes a new instance of <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/>.
        /// </summary>
        /// <param name="<#= classData.BaseType.ParameterName #>"></param>
        /// <param name="unit"></param>
        public <#= classData.ClassName #>(double <#= classData.BaseType.ParameterName #>, <#= classData.BaseType.Name #> unit)
        {
            <#= classData.BaseType.Name #> = <#= classData.BaseType.ParameterName #>;
        }
		<#
		foreach(var unit in classData.Units)
		{
		#>

        /// <summary>
        /// Initializes a new instance of <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/>.
        /// </summary>
        /// <param name="value"></param>
        /// <param name="unit"></param>
        public <#= classData.ClassName #>(double value, <#= unit.Name #> unit)
        {
            <#= classData.BaseType.Name #> = UnitConverter.ConvertFrom(value, unit);
        }
		<#
		} 
		#>
 		<#
		foreach(var unit in classData.Units)
		{
		#>

        /// <summary>
        /// The value in <#= unit.ParameterName #>
        /// </summary>
        public double <#= unit.Name #>
        {
            get
            {
                return UnitConverter.ConvertTo(<#= classData.BaseType.Name #>, <#= classData.ClassName #>Unit.<#= unit.Name #>);
            }
        }
		<#
		} 
		#>

        /// <summary>
        /// Creates an instance of <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/> from its string representation
        /// </summary>
        /// <param name="s">The string representation of the <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/></param>
        /// <returns></returns>
        public static <#= classData.ClassName #> Parse(string s)
        {
            return UnitParser.Parse(s, From);
        }
 
        /// <summary>
        /// Reads an instance of <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/> from the <paramref name="reader"/>
        /// </summary>
        /// <param name="reader"></param>
        /// <returns>An instance of  <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/></returns>
        public static <#= classData.ClassName #> ReadFrom(XmlReader reader)
        {
            var v = new <#= classData.ClassName #>();
            v.ReadXml(reader);
            return v;
        }
 
        /// <summary>
        /// Creates a new instance of <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/>.
        /// </summary>
        /// <param name="value"></param>
        /// <param name="unit"></param>
        public static <#= classData.ClassName #> From<T>(double value, T unit) where T : I<#= classData.ClassName #>Unit
        {
            return new <#= classData.ClassName #>(UnitConverter.ConvertFrom(value, unit));
        }

        /// <summary>
        /// Creates a new instance of <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/>.
        /// </summary>
        /// <param name="value"></param>
        public static <#= classData.ClassName #> From<#= classData.BaseType.Name #>(double value)
        {
            return new <#= classData.ClassName #>(value);
        }
 		<#
		foreach(var unit in classData.Units)
		{
		#>

        /// <summary>
        /// Creates a new instance of <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/>.
        /// </summary>
        /// <param name="value"></param>
        public static <#= classData.ClassName #> From<#= unit.Name #>(double value)
        {
            return new <#= classData.ClassName #>(UnitConverter.ConvertFrom(value, <#= classData.ClassName #>Unit.<#= unit.Name #>));
        }
		<#
		} 
		#>
		 
        /// <summary>
        /// Indicates whether two <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/> instances are equal.
        /// </summary>
        /// <returns>
        /// true if the values of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
        /// </returns>
        /// <param name="left">A <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/>.</param>
        /// <param name="right">A <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/>.</param>
        public static bool operator ==(<#= classData.ClassName #> left, <#= classData.ClassName #> right)
        {
            return left.Equals(right);
        }
 
        /// <summary>
        /// Indicates whether two <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/> instances are not equal.
        /// </summary>
        /// <returns>
        /// true if the values of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
        /// </returns>
        /// <param name="left">A <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/>.</param>
        /// <param name="right">A <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/>.</param>
        public static bool operator !=(<#= classData.ClassName #> left, <#= classData.ClassName #> right)
        {
            return !left.Equals(right);
        }
 
        /// <summary>
        /// Indicates whether a specified <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/> is less than another specified <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/>.
        /// </summary>
        /// <returns>
        /// true if the value of <paramref name="left"/> is less than the value of <paramref name="right"/>; otherwise, false. 
        /// </returns>
        /// <param name="left">An <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/>.</param>
        /// <param name="right">An <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/>.</param>
        public static bool operator <(<#= classData.ClassName #> left, <#= classData.ClassName #> right)
        {
            return left.<#= classData.BaseType.Name #> < right.<#= classData.BaseType.Name #>;
        }
 
        /// <summary>
        /// Indicates whether a specified <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/> is greater than another specified <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/>.
        /// </summary>
        /// <returns>
        /// true if the value of <paramref name="left"/> is greater than the value of <paramref name="right"/>; otherwise, false. 
        /// </returns>
        /// <param name="left">An <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/>.</param>
        /// <param name="right">An <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/>.</param>
        public static bool operator >(<#= classData.ClassName #> left, <#= classData.ClassName #> right)
        {
            return left.<#= classData.BaseType.Name #> > right.<#= classData.BaseType.Name #>;
        }
 
        /// <summary>
        /// Indicates whether a specified <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/> is less than or equal to another specified <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/>.
        /// </summary>
        /// <returns>
        /// true if the value of <paramref name="left"/> is less than or equal to the value of <paramref name="right"/>; otherwise, false.
        /// </returns>
        /// <param name="left">An <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/>.</param>
        /// <param name="right">An <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/>.</param>
        public static bool operator <=(<#= classData.ClassName #> left, <#= classData.ClassName #> right)
        {
            return left.<#= classData.BaseType.Name #> <= right.<#= classData.BaseType.Name #>;
        }
 
        /// <summary>
        /// Indicates whether a specified <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/> is greater than or equal to another specified <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/>.
        /// </summary>
        /// <returns>
        /// true if the value of <paramref name="left"/> is greater than or equal to the value of <paramref name="right"/>; otherwise, false.
        /// </returns>
        /// <param name="left">An <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/>.</param>
        /// <param name="right">An <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/>.</param>
        public static bool operator >=(<#= classData.ClassName #> left, <#= classData.ClassName #> right)
        {
            return left.<#= classData.BaseType.Name #> >= right.<#= classData.BaseType.Name #>;
        }
 
        /// <summary>
        /// Multiplies an instance of <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/> with <paramref name="left"/> and returns the result.
        /// </summary>
        /// <param name="right">An instance of <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/></param>
        /// <param name="left">An instance of <seealso cref="T:System.Double"/></param>
        /// <returns>Multiplies an instance of <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/> with <paramref name="left"/> and returns the result.</returns>
        public static <#= classData.ClassName #> operator *(double left, <#= classData.ClassName #> right)
        {
            return new <#= classData.ClassName #>(left * right.<#= classData.BaseType.Name #>);
        }
 
        /// <summary>
        /// Multiplies an instance of <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/> with <paramref name="right"/> and returns the result.
        /// </summary>
        /// <param name="left">An instance of <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/></param>
        /// <param name="right">An instance of <seealso cref="T:System.Double"/></param>
        /// <returns>Multiplies an instance of <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/> with <paramref name="right"/> and returns the result.</returns>
        public static <#= classData.ClassName #> operator *(<#= classData.ClassName #> left, double right)
        {
            return new <#= classData.ClassName #>(left.<#= classData.BaseType.Name #> * right);
        }
 
        /// <summary>
        /// Divides an instance of <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/> with <paramref name="right"/> and returns the result.
        /// </summary>
        /// <param name="left">An instance of <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/></param>
        /// <param name="right">An instance of <seealso cref="T:System.Double"/></param>
        /// <returns>Divides an instance of <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/> with <paramref name="right"/> and returns the result.</returns>
        public static <#= classData.ClassName #> operator /(<#= classData.ClassName #> left, double right)
        {
            return new <#= classData.ClassName #>(left.<#= classData.BaseType.Name #> / right);
        }
 
        /// <summary>
        /// Adds two specified <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/> instances.
        /// </summary>
        /// <returns>
        /// An <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/> whose value is the sum of the values of <paramref name="left"/> and <paramref name="right"/>.
        /// </returns>
        /// <param name="left">A <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/>.</param>
        /// <param name="right">A TimeSpan.</param>
        public static <#= classData.ClassName #> operator +(<#= classData.ClassName #> left, <#= classData.ClassName #> right)
        {
            return new <#= classData.ClassName #>(left.<#= classData.BaseType.Name #> + right.<#= classData.BaseType.Name #>);
        }
 
        /// <summary>
        /// Subtracts an <#= classData.ClassName #> from another <#= classData.ClassName #> and returns the difference.
        /// </summary>
        /// <returns>
        /// An <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/> that is the difference
        /// </returns>
        /// <param name="left">A <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/> (the minuend).</param>
        /// <param name="right">A <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/> (the subtrahend).</param>
        public static <#= classData.ClassName #> operator -(<#= classData.ClassName #> left, <#= classData.ClassName #> right)
        {
            return new <#= classData.ClassName #>(left.<#= classData.BaseType.Name #> - right.<#= classData.BaseType.Name #>);
        }
 
        /// <summary>
        /// Returns an <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/> whose value is the negated value of the specified instance.
        /// </summary>
        /// <returns>
        /// An <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/> with the same numeric value as this instance, but the opposite sign.
        /// </returns>
        /// <param name="<#= classData.ClassName #>">A <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/></param>
        public static <#= classData.ClassName #> operator -(<#= classData.ClassName #> <#= classData.ClassName #>)
        {
            return new <#= classData.ClassName #>(-1 * <#= classData.ClassName #>.<#= classData.BaseType.Name #>);
        }
 
        /// <summary>
        /// Returns the specified instance of <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/>.
        /// </summary>
        /// <returns>
        /// Returns <paramref name="<#= classData.ClassName #>"/>.
        /// </returns>
        /// <param name="<#= classData.ClassName #>">A <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/></param>
        public static <#= classData.ClassName #> operator +(<#= classData.ClassName #> <#= classData.ClassName #>)
        {
            return <#= classData.ClassName #>;
        }
 
        public override string ToString()
        {
            return this.ToString((string)null, (IFormatProvider)NumberFormatInfo.CurrentInfo);
        }
 
        public string ToString(string format)
        {
            return this.ToString(format, (IFormatProvider)NumberFormatInfo.CurrentInfo);
        }
 
        public string ToString(IFormatProvider provider)
        {
            return this.ToString((string)null, (IFormatProvider)NumberFormatInfo.GetInstance(provider));
        }
 
        public string ToString(string format, IFormatProvider formatProvider)
        {
            return this.ToString(format, formatProvider, <#= classData.ClassName #>Unit.<#= classData.BaseType.Name #>);
        }
 
        public string ToString<T>(string format, IFormatProvider formatProvider, T unit) where T : I<#= classData.ClassName #>Unit
        {
            var value = UnitConverter.ConvertTo(this.<#= classData.BaseType.Name #>, unit);
            return string.Format("{0}{1}", value.ToString(format, formatProvider), unit.ShortName);
        }
 
        /// <summary>
        /// Compares this instance to a specified <see cref="T:MathNet.Spatial.Units.<#= classData.ClassName #>"/> object and returns an integer that indicates whether this <see cref="instance"/> is shorter than, equal to, or longer than the <see cref="T:MathNet.Spatial.Units.<#= classData.ClassName #>"/> object.
        /// </summary>
        /// <returns>
        /// A signed number indicating the relative values of this instance and <paramref name="value"/>.
        /// 
        ///                     Value
        /// 
        ///                     Description
        /// 
        ///                     A negative integer
        /// 
        ///                     This instance is smaller than <paramref name="value"/>.
        /// 
        ///                     Zero
        /// 
        ///                     This instance is equal to <paramref name="value"/>.
        /// 
        ///                     A positive integer
        /// 
        ///                     This instance is larger than <paramref name="value"/>.
        /// 
        /// </returns>
        /// <param name="value">A <see cref="T:MathNet.Spatial.Units.<#= classData.ClassName #>"/> object to compare to this instance.</param>
        public int CompareTo(<#= classData.ClassName #> value)
        {
            return this.<#= classData.BaseType.Name #>.CompareTo(value.<#= classData.BaseType.Name #>);
        }
 
        /// <summary>
        /// Returns a value indicating whether this instance is equal to a specified <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/> object.
        /// </summary>
        /// <returns>
        /// true if <paramref name="other"/> represents the same <#= classData.ClassName #> as this instance; otherwise, false.
        /// </returns>
        /// <param name="other">An <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/> object to compare with this instance.</param>
        public bool Equals(<#= classData.ClassName #> other)
        {
            return this.<#= classData.BaseType.Name #>.Equals(other.<#= classData.BaseType.Name #>);
        }
 
        /// <summary>
        /// Returns a value indicating whether this instance is equal to a specified <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/> object within the given tolerance.
        /// </summary>
        /// <returns>
        /// true if <paramref name="other"/> represents the same <#= classData.ClassName #> as this instance; otherwise, false.
        /// </returns>
        /// <param name="other">An <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/> object to compare with this instance.</param>
        /// <param name="tolerance">The maximum difference for being considered equal</param>
        public bool Equals(<#= classData.ClassName #> other, double tolerance)
        {
            return Math.Abs(this.<#= classData.BaseType.Name #> - other.<#= classData.BaseType.Name #>) < tolerance;
        }
 
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }
 
            return obj is <#= classData.ClassName #> && this.Equals((<#= classData.ClassName #>)obj);
        }
 
        public override int GetHashCode()
        {
            return this.<#= classData.BaseType.Name #>.GetHashCode();
        }
 
        /// <summary>
        /// This method is reserved and should not be used. When implementing the IXmlSerializable interface, 
        /// you should return null (Nothing in Visual Basic) from this method, and instead, 
        /// if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
        /// </summary>
        /// <returns>
        /// An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
        ///  <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> 
        /// method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
        /// </returns>
        public XmlSchema GetSchema()
        {
            return null;
        }
 
        /// <summary>
        /// Generates an object from its XML representation.
        /// </summary>
        /// <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        public void ReadXml(XmlReader reader)
        {
            reader.MoveToContent();
            var e = (XElement)XNode.ReadFrom(reader);
 
            // Hacking set readonly fields here, can't think of a cleaner workaround
            XmlExt.SetReadonlyField(ref this, x => x.<#= classData.BaseType.Name #>, XmlConvert.ToDouble(XmlExt.ReadAttributeOrElementOrDefault(e, "Value")));
        }
 
        /// <summary>
        /// Converts an object into its XML representation.
        /// </summary>
        /// <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        public void WriteXml(XmlWriter writer)
        {
            XmlExt.WriteAttribute(writer, "Value", this.<#= classData.BaseType.Name #>);
        }
	}
}
<#
}
#>