<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.CSharp" #>
<#@ import namespace="System" #>
<#@ output extension=".txt" #>
<#@ parameter name="ClassMetaData" type="System.Object" #>
<# 
if (ClassMetaData != null)
{
	// Template used by SimpleSample.tt
	var classData = ClassMetaData as dynamic;
#>
namespace <#= classData.Namespace #>
{
    using System;
    using System.Globalization;
    using System.Xml;
    using System.Xml.Linq;
    using System.Xml.Schema;
    using System.Xml.Serialization;

	/// <summary>
    /// An <#= classData.ClassName #>
    /// </summary>
    [Serializable]
	public partial struct <#= classData.ClassName #> : IComparable<<#= classData.ClassName #>>, IEquatable<<#= classData.ClassName #>>, IFormattable, IXmlSerializable, IUnitValue
	{
	    /// <summary>
        /// The value in <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/>.
        /// </summary>
		public readonly <#= classData.BaseType #> <#= classData.BaseType #>;
		
		private <#= classData.ClassName #>(double <#= classData.BaseType.ParameterName #>)
        {
            <#= classData.BaseType #> = <#= classData.BaseType.ParameterName #>;
        }

		/// <summary>
        /// Initializes a new instance of <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/>.
        /// </summary>
        /// <param name="<#= classData.BaseType.ParameterName #>"></param>
        /// <param name="unit"></param>
        public <#= classData.ClassName #>(double <#= classData.BaseType.ParameterName #>, <#= classData.BaseType #> unit)
        {
            <#= classData.BaseType #> = <#= classData.BaseType.ParameterName #>;
        }
		<#
		foreach(var unit in classData.Units)
		{
		#>

        /// <summary>
        /// Initializes a new instance of <see cref="T:<#= classData.Namespace #>.<#= classData.ClassName #>"/>.
        /// </summary>
        /// <param name="value"></param>
        /// <param name="unit"></param>
        public <#= classData.ClassName #>(double value, <#= unit #> unit)
        {
            <#= classData.BaseType #> = UnitConverter.ConvertFrom(value, unit);
        }
		<#
		} 
		#>

	}
}
<#
}
#>