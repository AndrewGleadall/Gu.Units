namespace GeneratorBox.Units
{
    using System;
    using System.Globalization;
    using System.Xml;
    using System.Xml.Linq;
    using System.Xml.Schema;
    using System.Xml.Serialization;

	/// <summary>
    /// An Length
    /// </summary>
    [Serializable]
	public partial struct Length : IComparable<Length>, IEquatable<Length>, IFormattable, IXmlSerializable, IUnitValue
	{
	    /// <summary>
        /// The value in <see cref="T:GeneratorBox.Units.Meters"/>.
        /// </summary>
		public readonly double Meters;
		
		private Length(double meters)
        {
            Meters = meters;
        }

		/// <summary>
        /// Initializes a new instance of <see cref="T:GeneratorBox.Units.Length"/>.
        /// </summary>
        /// <param name="meters"></param>
        /// <param name="unit"></param>
        public Length(double meters, Meters unit)
        {
            Meters = meters;
        }
		
        /// <summary>
        /// Initializes a new instance of <see cref="T:GeneratorBox.Units.Length"/>.
        /// </summary>
        /// <param name="value"></param>
        /// <param name="unit"></param>
        public Length(double value, Centimeters unit)
        {
            Meters = UnitConverter.ConvertFrom(value, unit);
        }
		
        /// <summary>
        /// Initializes a new instance of <see cref="T:GeneratorBox.Units.Length"/>.
        /// </summary>
        /// <param name="value"></param>
        /// <param name="unit"></param>
        public Length(double value, Millimeters unit)
        {
            Meters = UnitConverter.ConvertFrom(value, unit);
        }
		 		
        /// <summary>
        /// The value in centimeters
        /// </summary>
        public double Centimeters
        {
            get
            {
                return UnitConverter.ConvertTo(Meters, LengthUnit.Centimeters);
            }
        }
		
        /// <summary>
        /// The value in millimeters
        /// </summary>
        public double Millimeters
        {
            get
            {
                return UnitConverter.ConvertTo(Meters, LengthUnit.Millimeters);
            }
        }
		
        /// <summary>
        /// Creates an instance of <see cref="T:GeneratorBox.Units.Length"/> from its string representation
        /// </summary>
        /// <param name="s">The string representation of the <see cref="T:GeneratorBox.Units.Length"/></param>
        /// <returns></returns>
        public static Length Parse(string s)
        {
            return UnitParser.Parse(s, From);
        }
 
        /// <summary>
        /// Reads an instance of <see cref="T:GeneratorBox.Units.Length"/> from the <paramref name="reader"/>
        /// </summary>
        /// <param name="reader"></param>
        /// <returns>An instance of  <see cref="T:GeneratorBox.Units.Length"/></returns>
        public static Length ReadFrom(XmlReader reader)
        {
            var v = new Length();
            v.ReadXml(reader);
            return v;
        }
 
        /// <summary>
        /// Creates a new instance of <see cref="T:GeneratorBox.Units.Length"/>.
        /// </summary>
        /// <param name="value"></param>
        /// <param name="unit"></param>
        public static Length From<T>(double value, T unit) where T : ILengthUnit
        {
            return new Length(UnitConverter.ConvertFrom(value, unit));
        }

	}
}
