<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.CSharp" #>
<#@ import namespace="System" #>
<#@ output extension=".txt" #>
<#@ assembly name="$(TargetPath)" #>
<#@ import namespace="Gu.Units.Generator" #> 
<#@ parameter name="UnitMetaData" type="Gu.Units.Generator.Unit" #>
<#
// Template used by UnitGenerator.tt
var unit = UnitMetaData ?? new Unit("Length", "Gu.Units", "Meters", "1e-3", "mm");
#>
namespace <#= unit.Namespace #>
{
    using System;
    using System.ComponentModel;

    [Serializable, EditorBrowsable(EditorBrowsableState.Never)]
    public struct <#= unit.ClassName #> : I<#= unit.Quantity.ClassName #>Unit
    {
        internal const string _symbol = "<#= unit.Symbol #>";

        public string Symbol
        {
            get
            {
                return _symbol;
            }
        }

        public static <#= unit.Quantity.ClassName #> operator *(double left, <#= unit.ClassName #> right)
        {
            return new <#= unit.Quantity.ClassName #>(left, right);
        }
		
        /// <summary>
        /// Converts a quantity in <see cref="T:<#= unit.Namespace #>.<#= unit.ClassName #>"/> quantity to <see cref="T:<#= unit.Namespace #>.<#= unit.SiUnit.ClassName #>"/>.
        /// </summary>
        /// <param name="<#= unit.ParameterName #>"></param>
        /// <returns>The converted quantity</returns>
        public double ToSiUnit(double <#= unit.ParameterName #>)
        {
            return <#= unit.Conversion #>*<#= unit.ParameterName #>;
        }
    }
}